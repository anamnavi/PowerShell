<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">
  <Obj RefId="0">
    <TN RefId="0">
      <T>Microsoft.PowerShell.Commands.PSRepositoryItemInfo</T>
      <T>System.Management.Automation.PSCustomObject</T>
      <T>System.Object</T>
    </TN>
    <MS>
      <S N="Name">Pester</S>
      <Version N="Version">4.8.1</Version>
      <S N="Type">Module</S>
      <S N="Description">Pester provides a framework for running BDD style Tests to execute and validate PowerShell commands inside of PowerShell and offers a powerful set of Mocking Functions that allow tests to mimic and mock the functionality of any command inside of a piece of PowerShell code being tested. Pester tests can execute any command or script that is accessible to a pester test file. This can include functions, Cmdlets, Modules and scripts. Pester can be run in ad hoc style in a console or it can be integrated into the Build scripts of a Continuous Integration system.</S>
      <S N="Author">Pester Team</S>
      <Obj N="CompanyName" RefId="1">
        <TN RefId="1">
          <T>System.Object[]</T>
          <T>System.Array</T>
          <T>System.Object</T>
        </TN>
        <LST>
          <S>dlwyatt</S>
          <S>nohwnd</S>
        </LST>
      </Obj>
      <S N="Copyright">Copyright (c) 2019 by Pester Team, licensed under Apache 2.0 License.</S>
      <DT N="PublishedDate">2019-05-11T13:27:09-04:00</DT>
      <Obj N="InstalledDate" RefId="2">
        <DT>2020-10-26T11:07:08.9229283-04:00</DT>
        <MS>
          <Obj N="DisplayHint" RefId="3">
            <TN RefId="2">
              <T>Microsoft.PowerShell.Commands.DisplayHintType</T>
              <T>System.Enum</T>
              <T>System.ValueType</T>
              <T>System.Object</T>
            </TN>
            <ToString>DateTime</ToString>
            <I32>2</I32>
          </Obj>
        </MS>
      </Obj>
      <Nil N="UpdatedDate" />
      <URI N="LicenseUri">https://www.apache.org/licenses/LICENSE-2.0.html</URI>
      <URI N="ProjectUri">https://github.com/Pester/Pester</URI>
      <URI N="IconUri">https://raw.githubusercontent.com/pester/Pester/master/images/pester.PNG</URI>
      <Obj N="Tags" RefId="4">
        <TNRef RefId="1" />
        <LST>
          <S>powershell</S>
          <S>unit_testing</S>
          <S>bdd</S>
          <S>tdd</S>
          <S>mocking</S>
          <S>PSEdition_Core</S>
          <S>PSEdition_Desktop</S>
          <S>Windows</S>
          <S>Linux</S>
          <S>MacOS</S>
          <S>PSModule</S>
        </LST>
      </Obj>
      <Obj N="Includes" RefId="5">
        <TN RefId="3">
          <T>System.Collections.Hashtable</T>
          <T>System.Object</T>
        </TN>
        <DCT>
          <En>
            <S N="Key">DscResource</S>
            <Obj N="Value" RefId="6">
              <TNRef RefId="1" />
              <LST />
            </Obj>
          </En>
          <En>
            <S N="Key">Cmdlet</S>
            <Ref N="Value" RefId="6" />
          </En>
          <En>
            <S N="Key">Command</S>
            <Obj N="Value" RefId="7">
              <TNRef RefId="1" />
              <LST>
                <S>Describe</S>
                <S>Context</S>
                <S>It</S>
                <S>Should</S>
                <S>Mock</S>
                <S>Assert-MockCalled</S>
                <S>Assert-VerifiableMock</S>
                <S>Assert-VerifiableMocks</S>
                <S>New-Fixture</S>
                <S>Get-TestDriveItem</S>
                <S>Invoke-Pester</S>
                <S>Setup</S>
                <S>In</S>
                <S>InModuleScope</S>
                <S>Invoke-Mock</S>
                <S>BeforeEach</S>
                <S>AfterEach</S>
                <S>BeforeAll</S>
                <S>AfterAll</S>
                <S>Get-MockDynamicParameter</S>
                <S>Set-DynamicParameterVariable</S>
                <S>Set-TestInconclusive</S>
                <S>Set-ItResult</S>
                <S>SafeGetCommand</S>
                <S>New-PesterOption</S>
                <S>New-MockObject</S>
                <S>Add-AssertionOperator</S>
                <S>Get-ShouldOperator</S>
                <S>Invoke-Gherkin</S>
                <S>Find-GherkinStep</S>
                <S>GherkinStep</S>
                <S>BeforeEachFeature</S>
                <S>AfterEachFeature</S>
                <S>BeforeEachScenario</S>
                <S>AfterEachScenario</S>
              </LST>
            </Obj>
          </En>
          <En>
            <S N="Key">Function</S>
            <Obj N="Value" RefId="8">
              <TNRef RefId="1" />
              <LST>
                <S>Describe</S>
                <S>Context</S>
                <S>It</S>
                <S>Should</S>
                <S>Mock</S>
                <S>Assert-MockCalled</S>
                <S>Assert-VerifiableMock</S>
                <S>Assert-VerifiableMocks</S>
                <S>New-Fixture</S>
                <S>Get-TestDriveItem</S>
                <S>Invoke-Pester</S>
                <S>Setup</S>
                <S>In</S>
                <S>InModuleScope</S>
                <S>Invoke-Mock</S>
                <S>BeforeEach</S>
                <S>AfterEach</S>
                <S>BeforeAll</S>
                <S>AfterAll</S>
                <S>Get-MockDynamicParameter</S>
                <S>Set-DynamicParameterVariable</S>
                <S>Set-TestInconclusive</S>
                <S>Set-ItResult</S>
                <S>SafeGetCommand</S>
                <S>New-PesterOption</S>
                <S>New-MockObject</S>
                <S>Add-AssertionOperator</S>
                <S>Get-ShouldOperator</S>
                <S>Invoke-Gherkin</S>
                <S>Find-GherkinStep</S>
                <S>GherkinStep</S>
                <S>BeforeEachFeature</S>
                <S>AfterEachFeature</S>
                <S>BeforeEachScenario</S>
                <S>AfterEachScenario</S>
              </LST>
            </Obj>
          </En>
          <En>
            <S N="Key">RoleCapability</S>
            <Ref N="Value" RefId="6" />
          </En>
          <En>
            <S N="Key">Workflow</S>
            <Ref N="Value" RefId="6" />
          </En>
        </DCT>
      </Obj>
      <Nil N="PowerShellGetFormatVersion" />
      <S N="ReleaseNotes">https://github.com/pester/Pester/releases/tag/4.8.1</S>
      <Obj N="Dependencies" RefId="9">
        <TNRef RefId="1" />
        <LST />
      </Obj>
      <S N="RepositorySourceLocation">https://www.powershellgallery.com/api/v2</S>
      <S N="Repository">PSGallery</S>
      <S N="PackageManagementProvider">NuGet</S>
      <Obj N="AdditionalMetadata" RefId="10">
        <TN RefId="4">
          <T>System.Management.Automation.PSCustomObject</T>
          <T>System.Object</T>
        </TN>
        <MS>
          <S N="copyright">Copyright (c) 2019 by Pester Team, licensed under Apache 2.0 License.</S>
          <S N="description">Pester provides a framework for running BDD style Tests to execute and validate PowerShell commands inside of PowerShell and offers a powerful set of Mocking Functions that allow tests to mimic and mock the functionality of any command inside of a piece of PowerShell code being tested. Pester tests can execute any command or script that is accessible to a pester test file. This can include functions, Cmdlets, Modules and scripts. Pester can be run in ad hoc style in a console or it can be integrated into the Build scripts of a Continuous Integration system.</S>
          <S N="requireLicenseAcceptance">False</S>
          <S N="releaseNotes">https://github.com/pester/Pester/releases/tag/4.8.1</S>
          <S N="isLatestVersion">False</S>
          <S N="isAbsoluteLatestVersion">False</S>
          <S N="versionDownloadCount">446574</S>
          <S N="downloadCount">3967812</S>
          <S N="packageSize">781122</S>
          <S N="published">5/11/2019 1:27:09 PM -04:00</S>
          <S N="created">5/11/2019 1:27:09 PM -04:00</S>
          <S N="lastUpdated">10/26/2020 3:04:10 PM -04:00</S>
          <S N="tags">powershell unit_testing bdd tdd mocking PSEdition_Core PSEdition_Desktop Windows Linux MacOS PSModule</S>
          <S N="developmentDependency">False</S>
          <S N="updated">2020-10-26T15:04:10Z</S>
          <S N="NormalizedVersion">4.8.1</S>
          <S N="Authors">Pester Team</S>
          <S N="IsPrerelease">false</S>
          <S N="ItemType">Module</S>
          <S N="FileList">Pester.nuspec|LICENSE|nunit_schema_2.5.xsd|Pester.psd1|Pester.psm1|bin\pester.bat|en-US\about_BeforeEach_AfterEach.help.txt|en-US\about_Mocking.help.txt|en-US\about_Pester.help.txt|en-US\about_Should.help.txt|en-US\about_TestDrive.help.txt|en-US\Gherkin.psd1|en-US\RSpec.psd1|Functions\Context.ps1|Functions\Coverage.ps1|Functions\Describe.ps1|Functions\Environment.ps1|Functions\Get-ShouldOperator.ps1|Functions\Gherkin.ps1|Functions\Gherkin.types.ps1xml|Functions\GherkinHook.ps1|Functions\GherkinStep.ps1|Functions\In.ps1|Functions\InModuleScope.ps1|Functions\It.ps1|Functions\Mock.ps1|Functions\New-Fixture.ps1|Functions\New-MockObject.ps1|Functions\Output.ps1|Functions\PesterState.ps1|Functions\Set-ItResult.ps1|Functions\SetupTeardown.ps1|Functions\TestDrive.ps1|Functions\TestRegistry.ps1|Functions\TestResults.ps1|Snippets\Context.snippets.ps1xml|Snippets\Describe.snippets.ps1xml|Snippets\It.snippets.ps1xml|Snippets\ShouldBe.snippets.ps1xml|Snippets\ShouldBeGreaterThan.snippets.ps1xml|Snippets\ShouldBeLessThan.snippets.ps1xml|Snippets\ShouldBeNullOrEmpty.snippets.ps1xml|Snippets\ShouldExist.snippets.ps1xml|Snippets\ShouldFileContentMatch.snippets.ps1xml|Snippets\ShouldMatch.snippets.ps1xml|Snippets\ShouldNotBe.snippets.ps1xml|Snippets\ShouldNotBeNullOrEmpty.snippets.ps1xml|Snippets\ShouldNotExist.snippets.ps1xml|Snippets\ShouldNotFileContentMatch.snippets.ps1xml|Snippets\ShouldNotMatch.snippets.ps1xml|Snippets\ShouldNotThrow.snippets.ps1xml|Snippets\ShouldThrow.snippets.ps1xml|Dependencies\Axiom\Axiom.psm1|Dependencies\Axiom\Verify-AssertionFailed.ps1|Dependencies\Axiom\Verify-Equal.ps1|Dependencies\Axiom\Verify-False.ps1|Dependencies\Axiom\Verify-NotNull.ps1|Dependencies\Axiom\Verify-NotSame.ps1|Dependencies\Axiom\Verify-Null.ps1|Dependencies\Axiom\Verify-Same.ps1|Dependencies\Axiom\Verify-Throw.ps1|Dependencies\Axiom\Verify-True.ps1|Dependencies\Axiom\Verify-Type.ps1|Dependencies\Format\Format.psm1|Dependencies\TypeClass\TypeClass.psm1|Functions\Assertions\Be.ps1|Functions\Assertions\BeGreaterThan.ps1|Functions\Assertions\BeIn.ps1|Functions\Assertions\BeLessThan.ps1|Functions\Assertions\BeLike.ps1|Functions\Assertions\BeLikeExactly.ps1|Functions\Assertions\BeNullOrEmpty.ps1|Functions\Assertions\BeOfType.ps1|Functions\Assertions\BeTrueOrFalse.ps1|Functions\Assertions\Contain.ps1|Functions\Assertions\Exist.ps1|Functions\Assertions\FileContentMatch.ps1|Functions\Assertions\FileContentMatchExactly.ps1|Functions\Assertions\FileContentMatchMultiline.ps1|Functions\Assertions\HaveCount.ps1|Functions\Assertions\HaveParameter.ps1|Functions\Assertions\Match.ps1|Functions\Assertions\MatchExactly.ps1|Functions\Assertions\PesterThrow.ps1|Functions\Assertions\Set-TestInconclusive.ps1|Functions\Assertions\Should.ps1|lib\Gherkin\gherkin-languages.json|lib\Gherkin\core\Gherkin.dll|lib\Gherkin\legacy\Gherkin.dll|lib\Gherkin\legacy\Newtonsoft.Json.dll</S>
          <S N="Functions">Describe Context It Should Mock Assert-MockCalled Assert-VerifiableMock Assert-VerifiableMocks New-Fixture Get-TestDriveItem Invoke-Pester Setup In InModuleScope Invoke-Mock BeforeEach AfterEach BeforeAll AfterAll Get-MockDynamicParameter Set-DynamicParameterVariable Set-TestInconclusive Set-ItResult SafeGetCommand New-PesterOption New-MockObject Add-AssertionOperator Get-ShouldOperator Invoke-Gherkin Find-GherkinStep GherkinStep BeforeEachFeature AfterEachFeature BeforeEachScenario AfterEachScenario</S>
          <S N="GUID">a699dea5-2c73-4616-a270-1f7abb777e71</S>
          <S N="PowerShellVersion">2.0</S>
          <S N="CompanyName">Pester</S>
        </MS>
      </Obj>
      <S N="InstalledLocation">C:\Users\annavied\Documents\PowerShell\Modules\Pester\4.8.1</S>
    </MS>
  </Obj>
</Objs>
